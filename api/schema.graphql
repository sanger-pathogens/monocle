schema {
  query: Query
  mutation: Mutation
}

type ChangePasswordMutation {
  committed: Boolean!
}

type DeleteTokens {
  deleted: Boolean!
}

scalar GenericScalar

type Institution {
  affiliatedMembers: [User!]
  country: String
  latitude: Float
  longitude: Float
  name: String
  samples: [Sample!]
}

type Mutation {
  tokenAuth(email: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(refreshToken: String): Refresh
  deleteTokenCookie: DeleteTokens
  updateSamples(samples: [SampleInput!]!): UpdateSamplesMutation
  changePassword(newPassword: String!, oldPassword: String!): ChangePasswordMutation
}

type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  refreshToken: String!
}

type Query {
  me: User!
  samplesList(sampleId: String, laneId: String, publicName: String, hostStatus: String, serotype: String, submittingInstitution: ID, id: ID): SampleList
  institutions: [Institution!]!
  compareSamples(samples: [SampleInput!]!): SamplesDiff!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  refreshToken: String!
}

type Sample {
  hostStatus: SampleHostStatusEnum
  laneId: String
  publicName: String
  sampleId: String
  serotype: SampleSerotypeEnum
  submittingInstitution: Institution
}

enum SampleHostStatusEnum {
  CARRIAGE
  SEPSIS
  BACTERAEMIA
  MENINGITIS
  PNEUMONIA
  URINARY_TRACT_INFECTION
  SKIN_AND_SOFT_TISSUE_INFECTION
  OSTEOMYELITIS
  ENDOCARDITIS
  SEPTIC_ARTHRITIS
  CHORIOAMNIONITIS
  PERITONITIS
  EMPYEMA
  SURGICAL_SITE_INFECTION
  UROSEPSIS
  ENDOMETRITIS
  MASTITIS
  DISEASE_OTHER
}

enum SampleHostStatusEnumCreate {
  CARRIAGE
  SEPSIS
  BACTERAEMIA
  MENINGITIS
  PNEUMONIA
  URINARY_TRACT_INFECTION
  SKIN_AND_SOFT_TISSUE_INFECTION
  OSTEOMYELITIS
  ENDOCARDITIS
  SEPTIC_ARTHRITIS
  CHORIOAMNIONITIS
  PERITONITIS
  EMPYEMA
  SURGICAL_SITE_INFECTION
  UROSEPSIS
  ENDOMETRITIS
  MASTITIS
  DISEASE_OTHER
}

input SampleInput {
  hostStatus: SampleHostStatusEnumCreate!
  laneId: String!
  publicName: String!
  sampleId: String!
  serotype: SampleSerotypeEnumCreate!
  submittingInstitution: ID!
}

type SampleList {
  results(limit: Int = 10, offset: Int, ordering: String): [Sample]
  totalCount: Int
}

enum SampleSerotypeEnum {
  IA
  IB
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  NT
  UNKNOWN
}

enum SampleSerotypeEnumCreate {
  IA
  IB
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  NT
  UNKNOWN
}

type SamplesDiff {
  removed: [Sample!]!
  added: [Sample!]!
  changed: [Sample!]!
  same: [Sample!]!
  missingInstitutions: [String!]!
}

type UpdateSamplesMutation {
  committed: Boolean!
  diff: SamplesDiff!
}

type User {
  affiliations: [Institution!]
  email: String
  firstName: String
  lastName: String
}

type Verify {
  payload: GenericScalar!
}
