# Port 8000 is the public port
# 
# Anything served via this port will be accessible via the Sanger load balancer (Zeus)
# i.e. exposed to the internet
# 
# All requests to :8000/ are proxied to :80/ so by default all requests to 8000 will reach
# port 80.
# 
# If a route needs to be restricted (unavailable outside the internal Sanger network)
# then a null proxysing rule MUST be added to this server.  For example:
# 
#     location /must-not-be-public {
#        # leave this block empty
#     }
# 
server {

   listen   8000;
   root     /usr/share/nginx/html;
   index    index.html;
   location / {
       # Forward to port 80
       proxy_pass  http://localhost:80;
       proxy_set_header Host $host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   }

   location /ldap-admin {
       # We don't expose the ldap admin url on the public port
   }
   
   location /legacy_dashboard/data/ {
       # This is an API that exposes data without authorisation, so it must not be exposed on the public port
   }

}
# end of port 8000 server


# Port 80 is the internal port, accessible via the Sanger internal network.
# 
# By default everything here is proxied via the public port so it is ALSO PUBLICLY ACCESSIBLE
# unless restricted in the public port (8000) section above.
# 
server {

   listen   80;
   
   # make public files from this nginx available to all containers under /files
   # (don't use conventional path /static in case that is used by whatever app server
   # is proxied from `/`)
   # TODO move images or other static content from here rather than via individual application servers
   location /files/ {
      proxy_pass        http://localhost:8080/;
   }

   location / {
       auth_request /collaborator-auth-proxy;

       # redirect 401 to login form
       # Comment them out if using HTTP basic authentication.
       # or authentication popup won't show
       # error_page 401 =200 /login;

       proxy_pass        http://frontend:3000/;
       proxy_set_header  X-Remote-User $remote_user;
       # examples of how to pass additional autho data
       # (see https://nginx.org/en/docs/http/ngx_http_upstream_module.html#variables)
       # auth_request_set  $nginx_auth_cookie "$upstream_cookie_nginxauth";
       # auth_request_set  $nginx_auth_status "$upstream_status";
       # proxy_set_header  X-Nginx-Auth-CookieData $nginx_auth_cookie;
       # proxy_set_header  X-Nginx-Auth-Status $nginx_auth_status;
       proxy_set_header  X-Real-IP $remote_addr;
       proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header  Host $http_host;
       proxy_set_header  X-NginX-Proxy true;
       proxy_redirect    off;
   }

   location = /collaborator-auth-proxy {
      internal;
      
      # this provides access to collaborators (i.e. any user account in LDAP)
      proxy_set_header  X-Ldap-Realm "Collaborators";
      proxy_set_header  X-Ldap-Template "(cn=%(username)s)";
      # to enable log in with email address rather than username, switch the template (above) to this:
      # proxy_set_header  X-Ldap-Template "(mail=%(username)s)";

      proxy_pass        http://ldap-auth-daemon:8888;
      proxy_set_header  X-Ldap-URL "ldap://monocle-ldap:389";
      # if we add a log in page (see the commented-out 401 redirect above) then it
      # should use a cookie;  define the cookie with the next two directives:
      # proxy_set_header  X-CookieName "nginxauth";
      # proxy_set_header  Cookie nginxauth=$cookie_nginxauth;
      proxy_set_header  X-Ldap-BaseDN "<LDAP_BASE_DN>";
      proxy_set_header  X-Ldap-BindDN "<LDAP_BIND_DN>";
      proxy_set_header  X-Ldap-BindPass "<LDAP_BIND_PASSWORD>";
      #proxy_set_header  X-Ldap-Starttls "true";
   }
   
   location = /admin-auth-proxy {
      internal;
      
      # this provides access to admins (i.e. user accounts with employeeType attribute `admin` )
      proxy_set_header  X-Ldap-Realm "Administrators";
      proxy_set_header  X-Ldap-Template "(&(cn=%(username)s)(employeeType=admin))";
      # to enable log in with email address rather than username, switch the template (above) to this:
      # proxy_set_header  X-Ldap-Template "(&(mail=%(username)s)(employeeType=admin))";

      proxy_pass        http://ldap-auth-daemon:8888;
      proxy_set_header  X-Ldap-URL "ldap://monocle-ldap:389";
      # if we add a log in page (see the commented-out 401 redirect above) then it
      # should use a cookie;  define the cookie with the next two directives:
      # proxy_set_header  X-CookieName "nginxauth";
      # proxy_set_header  Cookie nginxauth=$cookie_nginxauth;
      proxy_set_header  X-Ldap-BaseDN "<LDAP_BASE_DN>";
      proxy_set_header  X-Ldap-BindDN "<LDAP_BIND_DN>";
      proxy_set_header  X-Ldap-BindPass "<LDAP_BIND_PASSWORD>";
      #proxy_set_header  X-Ldap-Starttls "true";
   }

   location /dashboard/ {
      auth_request      /collaborator-auth-proxy;
      proxy_pass        http://dash:80/dashboard/;
      proxy_set_header  X-Remote-User $remote_user;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }
   
   location /legacy_dashboard/ {
      auth_request      /collaborator-auth-proxy;
      proxy_pass        http://dash:80/dashboard/;
      proxy_set_header  X-Remote-User $remote_user;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }
   
   # this requires no proxy-level authentication because it is restricted to internal access:
   # see the null proxy rule for the public port
   location /legacy_dashboard/data/ {
      proxy_pass        http://dash:80/legacy_dashboard/data/;
      proxy_set_header  X-Remote-User $remote_user;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }

   location /download/ {
      auth_request      /collaborator-auth-proxy;
      proxy_pass        http://dash:80/download/;
      proxy_set_header  X-Remote-User $remote_user;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }

   location /upload/ {
      auth_request      /admin-auth-proxy;
      # do *not* put a '/' opn the end of the proxy upstream URL
      proxy_pass        http://frontend:3000/upload;
      proxy_set_header  X-Remote-User $remote_user;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }

   location /metadata/ {
      auth_request      /collaborator-auth-proxy;
      proxy_pass        http://metadata-api:80/metadata/;
      proxy_set_header  X-Remote-User $remote_user;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }
   
   # this requires no proxy-level authentication because it is restricted to internal access:
   # see the null proxy rule for the public port
   location /ldap-admin/ {
      proxy_pass        http://ldap-admin:80/;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-NginX-Proxy true;
      proxy_redirect    off;
   }
 
}
# end of port 80 server

# Port 8080 is for content inside this NGINX container.
# 
# This is intended for static files that we don't want  to serve
# via a an app container
# 
# This is accessible via the /files proxy rule
server {

   listen   8080;
   root     /usr/share/nginx/html;
   index    index.html;
   location / {
   }

}
# end of port 8080 server
