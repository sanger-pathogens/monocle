openapi: '3.0.0'
info:
  title: "Monocle Dashboard API"
  version: "0.0.1"
  description: "A REST API service used by the Monocle dashboard."
  contact:
    email: "path-help@sanger.ac.uk"

servers:
  - url: /dashboard-api
    description: Context path

paths:
  /get_user_details:
    get:
      operationId: dash.api.routes.get_user_details_route
      summary: "Return all details for a user"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. A user details record is returned."
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_details:
                    $ref: "#/components/schemas/UserData"
        "403":
          description: "Authorization information is missing or invalid."

  /get_batches:
    get:
      operationId: dash.api.routes.get_batches_route
      summary: "Return information on batches delivered, keyed by institution id."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  batches:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/InstitutionBatchSummary"
        "403":
          description: "Authorization information is missing or invalid."

  /sequencing_status_summary:
    get:
      operationId: dash.api.routes.sequencing_status_summary_route
      summary: "Return information on sample/lane sequencing status, keyed by institution id."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  sequencing_status:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/InstitutionSequencingStatus"
        "403":
          description: "Authorization information is missing or invalid."

  /pipeline_status_summary:
    get:
      operationId: dash.api.routes.pipeline_status_summary_route
      summary: "Return information on sample/lane pipeline status, keyed by institution id."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  sequencing_status:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/InstitutionPipelineStatus"
        "403":
          description: "Authorization information is missing or invalid."
          
  /get_field_attributes:
    get:
      operationId: dash.api.routes.get_field_attributes_route
      summary: "Return attrubutes of metadata, in silico and QC data fields."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data is a JSON obnject describing metadata, in silico and QC data fields."
          content:
            application/json:
              schema:
                type: object
                properties:
                  field_attributes:
                    type: object
                    $ref: "#/components/schemas/FieldAttributes"
        "403":
          description: "Authorization information is missing or invalid."

  /bulk_download_info:
    post:
      operationId: dash.api.routes.bulk_download_info_route
      summary: "Return information on expected bulk download based on standard sample filters and data types"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDownloadInput"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadInfo"
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "No samples were found that matched the request criteria."

  /bulk_download_urls:
    post:
      operationId: dash.api.routes.bulk_download_urls_route
      summary: "Return download links corresponding to standard sample filters and data types"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDownloadInput"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadURLs"
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "No samples were found that matched the request criteria."

  /data_download/{token}:
    get:
      operationId: dash.api.routes.data_download_route
      summary: "For data download (assembly/annotation/reads in ZIP archive).  Response is a 302 redirecting to static file route for the download."
      parameters:
        - in: header
          name: X-Remote-User
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
        - name: "token"
          in: path
          description: "Download token (generated and embeded in URL(s) by /bulk_download_urls)"
          required: true
          schema:
            type: string
            minLength: 16
            maxLength: 32
            pattern: ^[a-f0-9]+$
        - name: "redirect"
          in: query
          description: "Flag indicating if the resposne should be a 303 redirect to the download location.  Test in swagger with \"false\", otherwise swagger UI will follow the redirect in the response and download the ZIP archive."
          required: false
          schema:
            type: boolean
            default: true
            example: false
      responses:
        "200":
          description: "The operation was successful. Return data provides the download location."
          content:
            application/json:
              schema:
                type: object
                properties:
                  download location:
                    type: string
                    format: uri
        "303":
          description: "The data are available."
          headers:
            Location:
              description: ""
              schema:
                type: string
                format: uri
        "403":
          description: "Download token missing or invalid."
        "404":
          description: "The data are not available (bad or expired token)."
          
  /get_progress:
    get:
      operationId: dash.api.routes.get_progress_route
      summary: "Return the information necessary for plotting the project sample progress graph."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  progress_graph:
                    $ref: "#/components/schemas/ProjectProgress"
        "403":
          description: "Authorization information is missing or invalid."

  /get_institutions:
    get:
      operationId: dash.api.routes.get_institutions_route
      summary: "Return a list of institutions."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  institutions:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/Institution"
        "403":
          description: "Authorization information is missing or invalid."

  /get_metadata:
    post:
      operationId: dash.api.routes.get_metadata_route
      summary: "Return metadata for samples matching standard sample filters"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMetadataInput"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMetadataOutput"
            text/csv:
              schema:
                type: string
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "No samples were found that matched the request criteria."
 
  /get_distinct_values:
    post:
      operationId: dash.api.routes.get_distinct_values_route
      summary: "Return distinct values found in metadata, in silico or QC data fields"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDistinctValuesInput"
            example:
              { "fields":
                  [  {  "field type":    "metadata",
                        "field names":   ["serotype", "age_group"]
                        },
                     {  "field type":    "in silico",
                        "field names":   ["ST", "cps_type"]
                        }
                     ],
                "sample filters":
                  {  "batches": [
                        {
                        "institution key": "NatRefLab",
                        "batch date": "2019-11-15"
                        }
                     ],
                     "metadata": {
                        "age_group": [
                        "adult"
                        ]
                     },
                     "in silico": {
                        "ST": [
                        "1",
                        "12",
                        "14"
                        ]
                     }
                  }
                }
                
      responses:
        "200":
          description: "The operation was successful."
          content:
            application/json:
              schema:
                type: object
                properties:
                  distinct values:
                    $ref: "#/components/schemas/GetDistinctValuesOutput"
              example:
                { "distinct values": [
                     {  "field type": "metadata",
                        "fields":     [   {  "name":     "serotype",
                                             "values":   ["Ia", "Ib", "III"],
                                             "matches":  [  {"value": "Ia",  "number": 0 },
                                                            {"value": "Ib",  "number": 7 },
                                                            {"value": "III", "number": 4 }
                                                            ]

                                             },
                                          {  "name":     "age_group",
                                             "values":   ["adult", "adolescent", "infant"],
                                             "matches":  [  {"value": "adult",      "number": 15 },
                                                            {"value": "adolescent", "number": 7 },
                                                            {"value": "infant",     "number": 0 }
                                                            ]
                                             }
                                       ]
                        },
                     {  "field type": "in silico",
                        "fields":      [  {  "name": "ST",
                                             "values": ["1", "1*", "10", "103", "103*?"],
                                             "matches":  [  {"value": "1",     "number": 4 },
                                                            {"value": "1*",    "number": 3 },
                                                            {"value": "103",   "number": 0 },
                                                            {"value": "103*?", "number": 0 }
                                                            ]
                                             },
                                          {  "name": "cps_type",
                                             "values": ["II", "III", "III/V", "Ia/II"],
                                             "matches":  [  {"value": "II",    "number": 4 },
                                                            {"value": "III",   "number": 3 },
                                                            {"value": "III/V", "number": 11 },
                                                            {"value": "Ia/II", "number": 6 }
                                                            ]
                                             }
                                          ]
                        }
                  ]}
                                
                    
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "One or more of the requested fields not recognised."
 
  /get_metadata_for_download/{institution}/{category}/{status}:
    get:
      operationId: dash.api.routes.get_metadata_for_download_route
      summary: "The operation was successful. The following data format will be returned..."
      parameters:
        - in: header
          name: X-Remote-User
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
        - name: "institution"
          in: path
          description: "The institution name."
          required: true
          schema:
            $ref: "#/components/schemas/InstitutionName"
        - name: "category"
          in: path
          description: "The category to be downloaded: sequencing or pipeline."
          required: true
          schema:
            $ref: "#/components/schemas/DashboardMetadataDownloadCategory"
        - name: "status"
          in: path
          description: "The status type to be downloaded: successful or failed."
          required: true
          schema:
            $ref: "#/components/schemas/DashboardMetadataDownloadStatus"
      responses:
        "200":
          description: "The operation was successful."
          content:
            text/csv:
              schema:
                type: string
        "403":
          description: "Authorization information is missing or invalid."

components:
  schemas:

    UserName:
       type: string
       minLength: 3
       maxLength: 256
       pattern: ^[a-zA-Z0-9à-úÀ-Ú\!#\$%&'\*\+\-\./=\?\^_`\{\|\}~;]+$

    Institution:
      description: "Institution key, name and source countries."
      type: object
      required:
        - db_key
        - inst_name
        - country_names
      properties:
        db_key:
          $ref: "#/components/schemas/InstitutionID"
        inst_name:
          $ref: "#/components/schemas/InstitutionName"
        country_names:
          $ref: "#/components/schemas/CountryNames"

    CountryNames:
      description: "List of countries."
      type: array
      items:
        $ref: "#/components/schemas/CountryName"
      minItems: 1

    InstitutionID:
       description: "The ID of the institution."
       type: string
       minLength: 3
       maxLength: 256
       pattern: ^[a-zA-Z0-9à-úÀ-Ú]*$
       example: "NatRefLab"

    InstitutionName:
       description: "The name of the institution."
       type: string
       minLength: 3
       maxLength: 256
       pattern: ^[a-zA-Z0-9à-úÀ-Ú _\-',;:\.\(\)]*$
       example: "National Reference Laboratories"

    CountryName:
      type: string
      minLength: 3
      maxLength: 256
      pattern: ^[a-zA-Z0-9à-úÀ-Ú _\-',;:\.\(\)\[\]]*$

    DashboardMetadataDownloadCategory:
       type: string
       minLength: 1
       maxLength: 20
       pattern: ^sequencing|pipeline$
       
    DashboardMetadataDownloadStatus:
       type: string
       minLength: 1
       maxLength: 20
       pattern: ^successful|failed$

    SampleFilters:
      type: object
      required:
        - batches
      properties:
        batches:
          type: array
          items:
            $ref: "#/components/schemas/InstKeyBatchDatePair"
        metadata:
          $ref: "#/components/schemas/MetadataFilters"
        in silico:
          $ref: "#/components/schemas/InSilicoFilters"

    MetadataFilters:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 256
        minItems: 1
      minItems: 0
      example:
        age_group: ["adult"]

    InSilicoFilters:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 256
        minItems: 1
      minItems: 0
      example:
        ST: ["1", "12", "14"]

    DataFieldType:
       description: "The type of data field:  metadata, in silico, or QC data"
       type: string
       minLength: 1
       maxLength: 20
       pattern: ^metadata|in silico|qc data$
       
    DataFieldName:
       oneOf:
         - $ref: "#/components/schemas/MetadataFieldName"
         - $ref: "#/components/schemas/InSilicoFieldName"
         - $ref: "#/components/schemas/QCDataFieldName"

    MetadataFieldName:
      description: "Valid metadata field name"
      type: string
      minLength: 1
      maxLength: 256
      pattern: ^sanger_sample_id|lane_id|submitting_institution|supplier_sample_name|public_name|host_status|study_name|study_ref|selection_random|country|county_state|city|collection_year|collection_month|collection_day|host_species|gender|age_group|age_years|age_months|age_weeks|age_days|disease_type|disease_onset|isolation_source|serotype|serotype_method|infection_during_pregnancy|maternal_infection_type|gestational_age_weeks|birth_weight_gram|apgar_score|ceftizoxime|ceftizoxime_method|cefoxitin|cefoxitin_method|cefotaxime|cefotaxime_method|cefazolin|cefazolin_method|ampicillin|ampicillin_method|penicillin|penicillin_method|erythromycin|erythromycin_method|clindamycin|clindamycin_method|tetracycline|tetracycline_method|levofloxacin|levofloxacin_method|ciprofloxacin|ciprofloxacin_method|daptomycin|daptomycin_method|vancomycin|vancomycin_method|linezolid|linezolid_method$

    InSilicoFieldName:
      description: "Valid in silico field name"
      type: string
      minLength: 1
      maxLength: 256
      pattern: ^lane_id|cps_type|ST|adhP|pheS|atr|glnA|sdhA|glcK|tkt|twenty_three_S1|twenty_three_S3|AAC6APH2|AADECC|ANT6|APH3III|APH3OTHER|CATPC194|CATQ|ERMA|ERMB|ERMT|LNUB|LNUC|LSAC|MEFA|MPHC|MSRA|MSRD|FOSA|GYRA|PARC|RPOBGBS_1|RPOBGBS_2|RPOBGBS_3|RPOBGBS_4|SUL2|TETB|TETL|TETM|TETO|TETS|ALP1|ALP23|ALPHA|HVGA|PI1|PI2A1|PI2A2|PI2B|RIB|SRR1|SRR2|GYRA_variant|PARC_variant$

    QCDataFieldName:
      description: "Valid QC data field name"
      type: string
      minLength: 1
      maxLength: 256
      pattern: ^rel_abun_sa$

    GetMetadataInput:
      type: object
      required:
        - sample filters
      properties:
        sample filters:
          $ref: "#/components/schemas/SampleFilters"
        as csv:
          description: "Set this flag to true when a text/csv response is required"
          type: boolean
          default: false
        csv filename:
          description: "For text/csv responses: the filename to use in the Content-Disposition header"
          type: string
          minLength: 1
          maxLength: 256
          default: "monocle.csv"
          example: "monocle.csv"
        in silico:
          description: "Set this flag to true to include in silico data with the metadata (ignored when 'as csv' is true)"
          type: boolean
          default: true
        qc data:
          description: "Set this flag to true to include in QC data with the metadata (ignored when 'as csv' is true)"
          type: boolean
          default: true
        start row:
          description: "For pagination: the first row of metadata (starting at 1) to be returned (ignored when 'as csv' is true)"
          type: integer
          minimum: 1
          example: 1
        num rows:
          description: "For pagination: number of rows of metadata to be returned (ignored when 'as csv' is true)"
          type: integer
          minimum: 1
          default: 20
          example: 20
        metadata columns:
          description: "List of metadata columns that should be returned (as defined by the Metadata object). Pass ['_ALL'] to get all columns. Ignored when 'as csv' is true: all columns are always returned."
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9_]*$
          default:
            - "submitting_institution"
            - "public_name"
            - "host_status"
            - "selection_random"
            - "country"
            - "collection_year"
            - "host_species"
            - "isolation_source"
            - "serotype"
          example:
            - "submitting_institution"
            - "public_name"
            - "host_status"
            - "selection_random"
            - "country"
            - "collection_year"
            - "host_species"
            - "isolation_source"
            - "serotype"
        in silico columns:
          description: "List of in silico data columns that should be returned (as defined by the InSilicoData object). Pass ['_ALL'] to get all columns. Ignored when 'as csv' is true: all columns are always returned."
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9_]*$
          default:
            - "ST"
          example:
            - "ST"
        qc data columns:
          description: "List of QC data columns that should be returned (as defined by the QCData object). Pass ['_ALL'] to get all columns. Ignored when 'as csv' is true: all columns are always returned."
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9_]*$
          default:
            - "rel_abun_sa"
          example:
            - "rel_abun_sa"

    GetMetadataOutput:
      type: object
      readOnly: true
      required:
        - samples
        - total rows
        - last row
      properties:
        last row:
          description: "Number of the last row in this response.  If start row + num rows exceeds the total number of rows, this will be the last available row."
          type: integer
          minimum: 1
        total rows:
          description: "Total number of rows that match the sample filters passed."
          type: integer
          minimum: 0
        samples:
          type: array
          items:
            $ref: "#/components/schemas/CombinedSampleMetadata"

    GetDistinctValuesInput:
      type: object
      required:
        - fields
      properties:
        fields:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              field type:
                description: "The type of field"
                $ref: "#/components/schemas/DataFieldType"
              field names:
                description: "A list of fields for which distinct values are required."
                type: array
                minItems: 1
                items:
                  $ref: "#/components/schemas/DataFieldName"
        sample filters:
          $ref: "#/components/schemas/SampleFilters"
          
    GetDistinctValuesOutput:
      type: array
      readOnly: true
      items:
        type: object
        properties:
          field type:
            description: "The type of field"
            $ref: "#/components/schemas/DataFieldType"
          fields:
            description: "A list of fields for which distinct values are required."
            type: array
            items:
              type: object
              required:
                - name
                - values
              properties:
                name:
                  $ref: "#/components/schemas/DataFieldName"
                values:
                  type: array
                  items:
                    description: "A value of this field that exists in the database"
                    type: string
                matches:
                  type: array
                  items:
                    type: object
                    properties:
                      value:
                        description: "A value of this field that exists in the database"
                        type: string
                      number:
                        description: "The number of filtered samples in which this value occurs"
                        type: integer

    CombinedSampleMetadata:
      type: object
      description: "Sample manifest metadata plus in silico and QC data"
      required:
        - metadata
      properties:
        metadata:
          $ref: "#/components/schemas/Metadata"
        in silico:
          $ref: "#/components/schemas/InSilicoData"
        qc data:
          $ref: "#/components/schemas/QCData"

    FieldAttributes:
      type: object
      readOnly: true
      properties:
        metadata:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/FieldCategory"
        in silico:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/FieldCategory"
        qc data:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/FieldCategory"
          
    FieldCategory:
      description: "A category of fields, grouped together as they describe conceptually related values."
      type: object
      readOnly: true
      properties:
        name:
          description: "The name of the category."
          type: string
        fields:
          description: "A list of fields in the category."
          type: array
          items:
            $ref: "#/components/schemas/FieldDescription"
        
    FieldDescription:
      description: "A description of a field"
      type: object
      readOnly: true
      required:
        - name
        - display
        - order
        - spreadsheet heading
        - display name
        - filter type
      properties:
        name:
          description: "The name of the field"
        display:
          description: "Flag indicating if this field should be displayed"
          type: boolean
        order:
          description: "Sort order for this field (1 = first column, etc.) in spreadsheet format.  Note that this format ignores the field categories!"
          type: integer
          minimum: 1
        spreadsheet heading:
          description: "The heading for this field in spreadsheet format"
          type: string
          minLength: 2
          maxLength: 256
        display name:
          description: "The name of this field that should be used for display"
          type: string
          minLength: 2
          maxLength: 256
        filter type:
          description: "The type of filter that should be used with this field: \"discrete\", \"numeric\", or \"none\""
          type: string
          pattern: ^discrete|numeric|none$
    
    Metadata:
      type: object
      required:
        - "sanger_sample_id"
        - "lane_id"
        - "submitting_institution"
        - "supplier_sample_name"
        - "public_name"
        - "host_status"
        - "study_name"
        - "study_ref"
        - "selection_random"
        - "country"
        - "county_state"
        - "city"
        - "collection_year"
        - "collection_month"
        - "collection_day"
        - "host_species"
        - "gender"
        - "age_group"
        - "age_years"
        - "age_months"
        - "age_weeks"
        - "age_days"
        - "disease_type"
        - "disease_onset"
        - "isolation_source"
        - "serotype"
        - "serotype_method"
        - "infection_during_pregnancy"
        - "maternal_infection_type"
        - "gestational_age_weeks"
        - "birth_weight_gram"
        - "apgar_score"
        - "ceftizoxime"
        - "ceftizoxime_method"
        - "cefoxitin"
        - "cefoxitin_method"
        - "cefotaxime"
        - "cefotaxime_method"
        - "cefazolin"
        - "cefazolin_method"
        - "ampicillin"
        - "ampicillin_method"
        - "penicillin"
        - "penicillin_method"
        - "erythromycin"
        - "erythromycin_method"
        - "clindamycin"
        - "clindamycin_method"
        - "tetracycline"
        - "tetracycline_method"
        - "levofloxacin"
        - "levofloxacin_method"
        - "ciprofloxacin"
        - "ciprofloxacin_method"
        - "daptomycin"
        - "daptomycin_method"
        - "vancomycin"
        - "vancomycin_method"
        - "linezolid"
        - "linezolid_method"
      properties:
        sanger_sample_id:
          $ref: "#/components/schemas/DownloadField"
        lane_id:
          $ref: "#/components/schemas/DownloadField"
        submitting_institution:
          $ref: "#/components/schemas/DownloadField"
        supplier_sample_name:
          $ref: "#/components/schemas/DownloadField"
        public_name:
          $ref: "#/components/schemas/DownloadField"
        host_status:
          $ref: "#/components/schemas/DownloadField"
        study_name:
          $ref: "#/components/schemas/DownloadField"
        study_ref:
          $ref: "#/components/schemas/DownloadField"
        selection_random:
          $ref: "#/components/schemas/DownloadField"
        country:
          $ref: "#/components/schemas/DownloadField"
        county_state:
          $ref: "#/components/schemas/DownloadField"
        city:
          $ref: "#/components/schemas/DownloadField"
        collection_year:
          $ref: "#/components/schemas/DownloadField"
        collection_month:
          $ref: "#/components/schemas/DownloadField"
        collection_day:
          $ref: "#/components/schemas/DownloadField"
        host_species:
          $ref: "#/components/schemas/DownloadField"
        gender:
          $ref: "#/components/schemas/DownloadField"
        age_group:
          $ref: "#/components/schemas/DownloadField"
        age_years:
          $ref: "#/components/schemas/DownloadField"
        age_months:
          $ref: "#/components/schemas/DownloadField"
        age_weeks:
          $ref: "#/components/schemas/DownloadField"
        age_days:
          $ref: "#/components/schemas/DownloadField"
        disease_type:
          $ref: "#/components/schemas/DownloadField"
        disease_onset:
          $ref: "#/components/schemas/DownloadField"
        isolation_source:
          $ref: "#/components/schemas/DownloadField"
        serotype:
          $ref: "#/components/schemas/DownloadField"
        serotype_method:
          $ref: "#/components/schemas/DownloadField"
        infection_during_pregnancy:
          $ref: "#/components/schemas/DownloadField"
        maternal_infection_type:
          $ref: "#/components/schemas/DownloadField"
        gestational_age_weeks:
          $ref: "#/components/schemas/DownloadField"
        birth_weight_gram:
          $ref: "#/components/schemas/DownloadField"
        apgar_score:
          $ref: "#/components/schemas/DownloadField"
        ceftizoxime:
          $ref: "#/components/schemas/DownloadField"
        ceftizoxime_method:
          $ref: "#/components/schemas/DownloadField"
        cefoxitin:
          $ref: "#/components/schemas/DownloadField"
        cefoxitin_method:
          $ref: "#/components/schemas/DownloadField"
        cefotaxime:
          $ref: "#/components/schemas/DownloadField"
        cefotaxime_method:
          $ref: "#/components/schemas/DownloadField"
        cefazolin:
          $ref: "#/components/schemas/DownloadField"
        cefazolin_method:
          $ref: "#/components/schemas/DownloadField"
        ampicillin:
          $ref: "#/components/schemas/DownloadField"
        ampicillin_method:
          $ref: "#/components/schemas/DownloadField"
        penicillin:
          $ref: "#/components/schemas/DownloadField"
        penicillin_method:
          $ref: "#/components/schemas/DownloadField"
        erythromycin:
          $ref: "#/components/schemas/DownloadField"
        erythromycin_method:
          $ref: "#/components/schemas/DownloadField"
        clindamycin:
          $ref: "#/components/schemas/DownloadField"
        clindamycin_method:
          $ref: "#/components/schemas/DownloadField"
        tetracycline:
          $ref: "#/components/schemas/DownloadField"
        tetracycline_method:
          $ref: "#/components/schemas/DownloadField"
        levofloxacin:
          $ref: "#/components/schemas/DownloadField"
        levofloxacin_method:
          $ref: "#/components/schemas/DownloadField"
        ciprofloxacin:
          $ref: "#/components/schemas/DownloadField"
        ciprofloxacin_method:
          $ref: "#/components/schemas/DownloadField"
        daptomycin:
          $ref: "#/components/schemas/DownloadField"
        daptomycin_method:
          $ref: "#/components/schemas/DownloadField"
        vancomycin:
          $ref: "#/components/schemas/DownloadField"
        vancomycin_method:
          $ref: "#/components/schemas/DownloadField"
        linezolid:
          $ref: "#/components/schemas/DownloadField"
        linezolid_method:
          $ref: "#/components/schemas/DownloadField"

    InSilicoData:
      type: object
      required:
       - "lane_id"
       - "cps_type"
       - "ST"
       - "adhP"
       - "pheS"
       - "atr"
       - "glnA"
       - "sdhA"
       - "glcK"
       - "tkt"
       - "twenty_three_S1"
       - "twenty_three_S3"
       - "AAC6APH2"
       - "AADECC"
       - "ANT6"
       - "APH3III"
       - "APH3OTHER"
       - "CATPC194"
       - "CATQ"
       - "ERMA"
       - "ERMB"
       - "ERMT"
       - "LNUB"
       - "LNUC"
       - "LSAC"
       - "MEFA"
       - "MPHC"
       - "MSRA"
       - "MSRD"
       - "FOSA"
       - "GYRA"
       - "PARC"
       - "RPOBGBS_1"
       - "RPOBGBS_2"
       - "RPOBGBS_3"
       - "RPOBGBS_4"
       - "SUL2"
       - "TETB"
       - "TETL"
       - "TETM"
       - "TETO"
       - "TETS"
       - "ALP1"
       - "ALP23"
       - "ALPHA"
       - "HVGA"
       - "PI1"
       - "PI2A1"
       - "PI2A2"
       - "PI2B"
       - "RIB"
       - "SRR1"
       - "SRR2"
       - "GYRA_variant"
       - "PARC_variant"
      properties:
        lane_id:
          $ref: "#/components/schemas/DownloadField"
        cps_type:
          $ref: "#/components/schemas/DownloadField"
        ST:
          $ref: "#/components/schemas/DownloadField"
        adhP:
          $ref: "#/components/schemas/DownloadField"
        pheS:
          $ref: "#/components/schemas/DownloadField"
        atr:
          $ref: "#/components/schemas/DownloadField"
        glnA:
          $ref: "#/components/schemas/DownloadField"
        sdhA:
          $ref: "#/components/schemas/DownloadField"
        glcK:
          $ref: "#/components/schemas/DownloadField"
        tkt:
          $ref: "#/components/schemas/DownloadField"
        twenty_three_S1:
          $ref: "#/components/schemas/DownloadField"
        twenty_three_S3:
          $ref: "#/components/schemas/DownloadField"
        AAC6APH2:
          $ref: "#/components/schemas/DownloadField"
        AADECC:
          $ref: "#/components/schemas/DownloadField"
        ANT6:
          $ref: "#/components/schemas/DownloadField"
        APH3III:
          $ref: "#/components/schemas/DownloadField"
        APH3OTHER:
          $ref: "#/components/schemas/DownloadField"
        CATPC194:
          $ref: "#/components/schemas/DownloadField"
        CATQ:
          $ref: "#/components/schemas/DownloadField"
        ERMA:
          $ref: "#/components/schemas/DownloadField"
        ERMB:
          $ref: "#/components/schemas/DownloadField"
        ERMT:
          $ref: "#/components/schemas/DownloadField"
        LNUB:
          $ref: "#/components/schemas/DownloadField"
        LNUC:
          $ref: "#/components/schemas/DownloadField"
        LSAC:
          $ref: "#/components/schemas/DownloadField"
        MEFA:
          $ref: "#/components/schemas/DownloadField"
        MPHC:
          $ref: "#/components/schemas/DownloadField"
        MSRA:
          $ref: "#/components/schemas/DownloadField"
        MSRD:
          $ref: "#/components/schemas/DownloadField"
        FOSA:
          $ref: "#/components/schemas/DownloadField"
        GYRA:
          $ref: "#/components/schemas/DownloadField"
        PARC:
          $ref: "#/components/schemas/DownloadField"
        RPOBGBS_1:
          $ref: "#/components/schemas/DownloadField"
        RPOBGBS_2:
          $ref: "#/components/schemas/DownloadField"
        RPOBGBS_3:
          $ref: "#/components/schemas/DownloadField"
        RPOBGBS_4:
          $ref: "#/components/schemas/DownloadField"
        SUL2:
          $ref: "#/components/schemas/DownloadField"
        TETB:
          $ref: "#/components/schemas/DownloadField"
        TETL:
          $ref: "#/components/schemas/DownloadField"
        TETM:
          $ref: "#/components/schemas/DownloadField"
        TETO:
          $ref: "#/components/schemas/DownloadField"
        TETS:
          $ref: "#/components/schemas/DownloadField"
        ALP1:
          $ref: "#/components/schemas/DownloadField"
        ALP23:
          $ref: "#/components/schemas/DownloadField"
        ALPHA:
          $ref: "#/components/schemas/DownloadField"
        HVGA:
          $ref: "#/components/schemas/DownloadField"
        PI1:
          $ref: "#/components/schemas/DownloadField"
        PI2A1:
          $ref: "#/components/schemas/DownloadField"
        PI2A2:
          $ref: "#/components/schemas/DownloadField"
        PI2B:
          $ref: "#/components/schemas/DownloadField"
        RIB:
          $ref: "#/components/schemas/DownloadField"
        SRR1:
          $ref: "#/components/schemas/DownloadField"
        SRR2:
          $ref: "#/components/schemas/DownloadField"
        GYRA_variant:
          $ref: "#/components/schemas/DownloadField"
        PARC_variant:
          $ref: "#/components/schemas/DownloadField"

    QCData:
      type: object
      required:
       - "lane_id"
       - "rel_abun_sa"
      properties:
        lane_id:
          $ref: "#/components/schemas/DownloadField"
        rel_abun_sa:
          $ref: "#/components/schemas/DownloadField"

    DownloadField:
      type: object
      required:
        - "title"
        - "value"
        - "order"
      properties:
        order:
          type: integer
          description: "An ordering integer index for the field"
          readOnly: true
        title:
          type: string
          description: "The name of the metadata field"
          readOnly: true
        value:
          type: string
          description: "The value of the metadata field"
          readOnly: true

    BulkDownloadInput:
      type: object
      required:
        - sample filters
      properties:
        sample filters:
          $ref: "#/components/schemas/SampleFilters"
        assemblies:
          type: boolean
        annotations:
          type: boolean
        reads:
          type: boolean
        max samples per zip:
          description: "The maximum number of samples in each ZIP archive.  Automatically divided by 10 if reads is true."
          type:    integer
          minimum: 1
          maximum: 500
          example: 25

    InstKeyBatchDatePair:
      type: object
      required:
        - "institution key"
        - "batch date"
      description: "Batch of samples, identified by institution and delivery date"
      properties:
        institution key:
          description: "Institution ID"
          $ref: "#/components/schemas/InstitutionID"
        batch date:
          description: "Date of delivery"
          $ref: "#/components/schemas/BatchDate"

    BatchDate:
      type: string
      format: date
      example: "2019-11-15"

    DownloadInfo:
      type: object
      required:
        - num_samples
        - size
        - size_zipped
      properties:
        num_samples:
          type: integer
          readOnly: true
        size:
          type: string
          readOnly: true
        size_zipped:
          type: string
          readOnly: true

    DownloadURLs:
      type: object
      required:
        - download_urls
      properties:
        download_urls:
          type: array
          items:
            type: string
            format: uri

    ProjectProgress:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/ProjectProgressData"

    ProjectProgressData:
      type: object
      required:
        - "date"
        - "samples received"
        - "samples sequenced"
      description: "Progress graph data."
      properties:
        date:
          type: array
          items:
            description: "The batch date."
            example: "Jan 2019"
            type: string
            readOnly: true
        samples received:
          type: array
          items:
            description: "The number of samples received for the batch."
            example: 300
            type: string
            readOnly: true
        samples sequenced:
          type: array
          items:
            description: "The number of samples sequenced for the batch."
            example: 200
            type: string
            readOnly: true

    InstitutionBatchSummary:
      type: object
      required:
        - expected
        - received
        - deliveries
      description: "Sample batch information for an institution."
      properties:
        expected:
          description: "The number of samples expected."
          example: 200
          type: integer
          readOnly: true
        received:
          description: "The number of samples received."
          example: 200
          type: integer
          readOnly: true
        deliveries:
          type: array
          items:
            $ref: "#/components/schemas/Batch"
          description: "Information on all batches delivered."

    Batch:
      type: object
      required:
        - name
        - date
        - number
      description: "Sample batch information."
      properties:
        name:
          description: "The batch name."
          example: "Batch 1"
          type: string
          readOnly: true
        date:
          description: "The delivery date."
          example: "2019-09-18"
          type: string
          readOnly: true
        number:
          description: "The batch sample size."
          example: 200
          type: integer
          readOnly: true

    InstitutionSequencingStatus:
      type: object
      required:
        - received
        - completed
        - success
        - failed
        - fail_messages
      description: "Sequencing status summary information for an institution."
      properties:
        received:
          description: "The number of lanes received."
          example: 400
          type: integer
          readOnly: true
        completed:
          description: "The number of lanes that have completed sequencing, whether pass or fail."
          example: 300
          type: integer
          readOnly: true
        success:
          description: "The number of lanes that have successfully completed sequencing."
          example: 298
          type: integer
          readOnly: true
        failed:
          description: "The number of lanes that have failed sequencing."
          example: 2
          type: integer
          readOnly: true
        fail_messages:
          type: array
          items:
            $ref: "#/components/schemas/FailureInformation"
          description: "Error information on all sequencing failures."

    InstitutionPipelineStatus:
      type: object
      required:
        - running
        - completed
        - success
        - failed
        - fail_messages
      description: "Pathogen pipelines status summary information for an institution."
      properties:
        running:
          description: "The number of lanes currently running."
          example: 400
          type: integer
          readOnly: true
        completed:
          description: "The number of lanes that have completed pipelines, whether pass or fail."
          example: 300
          type: integer
          readOnly: true
        success:
          description: "The number of lanes that have successfully completed pipeline runs."
          example: 298
          type: integer
          readOnly: true
        failed:
          description: "The number of lanes that have failed their pipeline runs."
          example: 2
          type: integer
          readOnly: true
        fail_messages:
          type: array
          items:
            $ref: "#/components/schemas/FailureInformation"
          description: "Error information on all pipeline failures."

    FailureInformation:
      type: object
      required:
        - lane
        - stage
        - issue
      properties:
        lane:
          description: "The failed lane id."
          example: "31741_3#378"
          type: string
          readOnly: true
        stage:
          description: "The name of QC stage where issues was detected."
          example: "qc_lib"
          type: string
          readOnly: true
        issue:
          description: "The associated error message."
          example: "Error message"
          type: string
          readOnly: true

    UserData:
      type: object
      required:
        - "username"
        - "memberOf"
      properties:
        username:
          type: string
          description: "The username for this user"
          readOnly: true
        type:
          type: string
          description: "Optional employee user type field, e.g. admin"
          readOnly: true
        memberOf:
          type: array
          description: "A list of institutions and source countries of institutions for which the user is a member"
          items:
            $ref: "#/components/schemas/Institution"
