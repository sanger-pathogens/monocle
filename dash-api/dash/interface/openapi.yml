openapi: '3.0.0'
info:
  title: "Monocle Dashboard API"
  version: "0.0.1"
  description: "A REST API service used by the Monocle dashboard."
  contact:
    email: "path-help@sanger.ac.uk"

servers:
  - url: /dashboard-api
    description: Context path

paths:
  /set_auth_cookie:
    post:
      operationId: dash.api.routes.set_auth_cookie_route
      summary: "Sets an authentication cookie and redirects user to page they were attempting to access. Credentials are NOT VERIFIED by this endpoint: this cookie needs to be checked by NGINX before authorisation is granted."
      parameters:
        - name: X-Target
          in: header
          description: "URL the user was requesting when intercepted for authorisation."
          required: false
          schema:
            type: string
            format: uri
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  description: "The username provided by the user"
                  type: string
                  minLength: 3
                  maxLength: 256
                password:
                  description: "The password provided by the user"
                  type: string
                  minLength: 3
                  maxLength: 256
      responses:
        "307":
          description: "The operation was successful. An UNVERIFIED authentication cookie is set and the user is redirected."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    readOnly: true
                    type: string
                    
  /delete_auth_cookie:
    get:
      operationId: dash.api.routes.delete_auth_cookie_route
      summary: "Immediately expires the authentication token used by NGINX."
      parameters:
        - name: X-Target
          in: header
          description: "URL the user should be redirected to after the cookies is deleted."
          required: false
          schema:
            type: string
            format: uri
      responses:
        "307":
          description: "The operation was successful. The authentication cookie has is expired and the user is redirected."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    readOnly: true
                    type: string

  /get_user_details:
    get:
      operationId: dash.api.routes.get_user_details_route
      summary: "Return all details for a user"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. A user details record is returned."
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_details:
                    $ref: "#/components/schemas/UserData"
        "403":
          description: "Authorization information is missing or invalid."

  /get_batches:
    get:
      operationId: dash.api.routes.get_batches_route
      summary: "Return information on batches delivered, keyed by institution id."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  batches:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/InstitutionBatchSummary"
        "403":
          description: "Authorization information is missing or invalid."

  /sequencing_status_summary:
    get:
      operationId: dash.api.routes.sequencing_status_summary_route
      summary: "Return information on sample/lane sequencing status, keyed by institution id."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  sequencing_status:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/InstitutionSequencingStatus"
        "403":
          description: "Authorization information is missing or invalid."

  /project:
    get:
      operationId: dash.api.routes.project_route
      summary: "Returns information used in the UI, like the logo URL."
      responses:
        "200":
          description: "The operation was successful."
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    type: object
        "403":
          description: "Authorization information is missing or invalid."

  /pipeline_status_summary:
    get:
      operationId: dash.api.routes.pipeline_status_summary_route
      summary: "Return information on sample/lane pipeline status, keyed by institution id."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  sequencing_status:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/InstitutionPipelineStatus"
        "403":
          description: "Authorization information is missing or invalid."

  /bulk_download_info:
    post:
      operationId: dash.api.routes.bulk_download_info_route
      summary: "Return information on expected bulk download based on standard sample filters and data types"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDownloadInput"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadInfo"
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "No samples were found that matched the request criteria."

  /bulk_download_urls:
    post:
      operationId: dash.api.routes.bulk_download_urls_route
      summary: "Return download links corresponding to standard sample filters and data types"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDownloadInput"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadURLs"
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "No samples were found that matched the request criteria."

  /data_download/{token}:
    get:
      operationId: dash.api.routes.data_download_route
      summary: "For data download (assembly/annotation/reads in ZIP archive).  Response is a 302 redirecting to static file route for the download."
      parameters:
        - in: header
          name: X-Remote-User
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
        - name: "token"
          in: path
          description: "Download token (generated and embeded in URL(s) by /bulk_download_urls)"
          required: true
          schema:
            type: string
            minLength: 16
            maxLength: 32
            pattern: ^[a-f0-9]+$
        - name: "redirect"
          in: query
          description: "Flag indicating if the resposne should be a 303 redirect to the download location.  Test in swagger with \"false\", otherwise swagger UI will follow the redirect in the response and download the ZIP archive."
          required: false
          schema:
            type: boolean
            default: true
            example: false
      responses:
        "200":
          description: "The operation was successful. Return data provides the download location."
          content:
            application/json:
              schema:
                type: object
                properties:
                  download location:
                    type: string
                    format: uri
        "303":
          description: "The data are available."
          headers:
            Location:
              description: ""
              schema:
                type: string
                format: uri
        "403":
          description: "Download token missing or invalid."
        "404":
          description: "The data are not available (bad or expired token)."
          
  /get_progress:
    get:
      operationId: dash.api.routes.get_progress_route
      summary: "Return the information necessary for plotting the project sample progress graph."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  progress_graph:
                    $ref: "#/components/schemas/ProjectProgress"
        "403":
          description: "Authorization information is missing or invalid."

  /get_institutions:
    get:
      operationId: dash.api.routes.get_institutions_route
      summary: "Return a list of institutions."
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      responses:
        "200":
          description: "The operation was successful. Returned data will be keyed on institution id, shown as additionalProp in the example below..."
          content:
            application/json:
              schema:
                type: object
                properties:
                  institutions:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - name
                      properties:
                        name:
                          $ref: "#/components/schemas/InstitutionName"
        "403":
          description: "Authorization information is missing or invalid."

  /get_metadata:
    post:
      operationId: dash.api.routes.get_metadata_route
      summary: "Return metadata for samples matching standard sample filters"
      parameters:
        - name: X-Remote-User
          in: header
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetMetadataInput"
      responses:
        "200":
          description: "The operation was successful. The following data format will be returned..."
          content:
            text/csv:
              schema:
                type: string
        "403":
          description: "Authorization information is missing or invalid."
        "404":
          description: "No samples were found that matched the request criteria."
  
  /get_metadata_for_download/{institution_key}/{category}/{status}:
    get:
      operationId: dash.api.routes.get_metadata_for_download_route
      summary: "The operation was successful. The following data format will be returned..."
      parameters:
        - in: header
          name: X-Remote-User
          description: "Username."
          required: false
          schema:
            $ref: "#/components/schemas/UserName"
        - name: "institution_key"
          in: path
          description: "The institution key."
          required: true
          schema:
            $ref: "#/components/schemas/InstitutionID"
        - name: "category"
          in: path
          description: "The category to be downloaded: sequencing or pipeline."
          required: true
          schema:
            $ref: "#/components/schemas/DashboardMetadataDownloadCategory"
        - name: "status"
          in: path
          description: "The status type to be downloaded: successful or failed."
          required: true
          schema:
            $ref: "#/components/schemas/DashboardMetadataDownloadStatus"
      responses:
        "200":
          description: "The operation was successful."
          content:
            text/csv:
              schema:
                type: string
        "403":
          description: "Authorization information is missing or invalid."

components:
  schemas:

    UserName:
       type: string
       minLength: 3
       maxLength: 256
       pattern: ^[a-zA-Z0-9à-úÀ-Ú\!#\$%&'\*\+\-\./=\?\^_`\{\|\}~;]+$

    Institution:
      description: "Institution key, name and source countries."
      type: object
      required:
        - db_key
        - inst_name
        - country_names
      properties:
        db_key:
          $ref: "#/components/schemas/InstitutionID"
        inst_name:
          $ref: "#/components/schemas/InstitutionName"
        country_names:
          $ref: "#/components/schemas/CountryNames"

    CountryNames:
      description: "List of countries."
      type: array
      items:
        $ref: "#/components/schemas/CountryName"
      minItems: 1

    InstitutionID:
       description: "The ID of the institution."
       type: string
       minLength: 3
       maxLength: 256
       pattern: ^[a-zA-Z0-9à-úÀ-Ú]*$
       example: "MinHeaCenLab"

    InstitutionName:
       description: "The name of the institution."
       type: string
       minLength: 3
       maxLength: 256
       pattern: ^[a-zA-Z0-9à-úÀ-Ú _\-',;:\.\(\)]*$
       example: "Ministry of Health, Central Laboratories"

    CountryName:
      type: string
      minLength: 3
      maxLength: 256
      pattern: ^[a-zA-Z0-9à-úÀ-Ú _\-',;:\.\(\)\[\]]*$

    DashboardMetadataDownloadCategory:
       type: string
       minLength: 1
       maxLength: 20
       pattern: ^sequencing|pipeline$
       
    DashboardMetadataDownloadStatus:
       type: string
       minLength: 1
       maxLength: 20
       pattern: ^successful|failed$

    SampleFilters:
      type: object
      required:
        - batches
      properties:
        batches:
          type: array
          items:
            $ref: "#/components/schemas/InstKeyBatchDatePair"
        sequencing:
          $ref: "#/components/schemas/SequencingFilters"
        pipeline:
          $ref: "#/components/schemas/PipelineFilters"

    SequencingFilters:
      type: object
      properties:
        complete:
          description: "samples with at least one lane that has completed sequencing, whether or not sequencing was a success"
          type: boolean
          default: false
        success:
          description: "samples with at least one lane that has been successfully sequenced"
          type: boolean
          default: false
      example:
        success: true

    PipelineFilters:
      type: object
      properties:
        complete:
          description: "samples with at least one lane that has completed pipeline, whether or not all stages were successful"
          type: boolean
          default: false
        success:
          description: "samples with at least one lane that was successful through all pipeline stages"
          type: boolean
          default: false
      example:
        success: true

    GetMetadataInput:
      type: object
      required:
        - sample filters
      properties:
        sample filters:
          $ref: "#/components/schemas/SampleFilters"
        csv filename:
          description: "For text/csv responses: the filename to use in the Content-Disposition header"
          type: string
          minLength: 1
          maxLength: 256
          default: "monocle.csv"
          example: "monocle.csv"
    
    DownloadField:
      type: object
      required:
        - "title"
        - "value"
        - "order"
      properties:
        order:
          type: integer
          description: "An ordering integer index for the field"
          readOnly: true
        title:
          type: string
          description: "The name of the metadata field"
          readOnly: true
        value:
          type: string
          description: "The value of the metadata field"
          readOnly: true

    BulkDownloadInput:
      type: object
      required:
        - sample filters
      properties:
        sample filters:
          $ref: "#/components/schemas/SampleFilters"
        assemblies:
          type: boolean
        annotations:
          type: boolean
        reads:
          type: boolean
        max samples per zip:
          description: "The maximum number of samples in each ZIP archive.  Automatically divided by 10 if reads is true."
          type:    integer
          minimum: 1
          maximum: 500
          example: 25

    InstKeyBatchDatePair:
      type: object
      required:
        - "institution key"
        - "batch date"
      description: "Batch of samples, identified by institution and delivery date"
      properties:
        institution key:
          description: "Institution ID"
          $ref: "#/components/schemas/InstitutionID"
        batch date:
          description: "Date of delivery"
          $ref: "#/components/schemas/BatchDate"

    BatchDate:
      type: string
      format: date
      example: "2019-11-15"

    DownloadInfo:
      type: object
      required:
        - num_samples
        - size
        - size_zipped
        - size_per_zip_options
      properties:
        num_samples:
          type: integer
          readOnly: true
        size:
          type: string
          readOnly: true
        size_zipped:
          type: string
          readOnly: true
        size_per_zip_options:
          type: array
          items:
            type: object
            required:
              - max_samples_per_zip
              - size_per_zip
            properties:
              max_samples_per_zip:
                type: integer
                minimum: 0
              size_per_zip:
                type: string
                minLength: 1
              num_samples_restricted_to:
                type: integer
                minimum: 0
                nullable: true
                readOnly: true
          readOnly: true

    DownloadURLs:
      type: object
      required:
        - download_urls
      properties:
        download_urls:
          type: array
          items:
            type: string
            format: uri
        num_samples_restricted_to:
          type: integer
          minimum: 0
          nullable: true
          readOnly: true

    ProjectProgress:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/ProjectProgressData"

    ProjectProgressData:
      type: object
      required:
        - "date"
        - "samples received"
        - "samples sequenced"
      description: "Progress graph data."
      properties:
        date:
          type: array
          items:
            description: "The batch date."
            example: "Jan 2019"
            type: string
            readOnly: true
        samples received:
          type: array
          items:
            description: "The number of samples received for the batch."
            example: 300
            type: string
            readOnly: true
        samples sequenced:
          type: array
          items:
            description: "The number of samples sequenced for the batch."
            example: 200
            type: string
            readOnly: true

    InstitutionBatchSummary:
      type: object
      required:
        - expected
        - received
        - deliveries
      description: "Sample batch information for an institution."
      properties:
        expected:
          description: "The number of samples expected."
          example: 200
          type: integer
          readOnly: true
        received:
          description: "The number of samples received."
          example: 200
          type: integer
          readOnly: true
        deliveries:
          type: array
          items:
            $ref: "#/components/schemas/Batch"
          description: "Information on all batches delivered."

    Batch:
      type: object
      required:
        - name
        - date
        - number
      description: "Sample batch information."
      properties:
        name:
          description: "The batch name."
          example: "Batch 1"
          type: string
          readOnly: true
        date:
          description: "The delivery date."
          example: "2019-09-18"
          type: string
          readOnly: true
        number:
          description: "The batch sample size."
          example: 200
          type: integer
          readOnly: true

    InstitutionSequencingStatus:
      type: object
      required:
        - received
        - completed
        - success
        - failed
        - fail_messages
      description: "Sequencing status summary information for an institution."
      properties:
        samples_received:
          description: "The number of SAMPLES received."
          example: 400
          type: integer
          readOnly: true
        samples_completed:
          description: "The number of SAMPLES with at least one lane that as completed sequencing, whether pass or fail."
          example: 300
          type: integer
          readOnly: true
        samples_successful:
          description: "The number of SAMPLES with at least one lane that has successfully completed sequencing."
          example: 300
          type: integer
          readOnly: true
        lanes_completed:
          description: "The number of LANES that have completed sequencing, whether pass or fail."
          example: 300
          type: integer
          readOnly: true
        lanes_successful:
          description: "The number of LANES that have successfully completed sequencing."
          example: 298
          type: integer
          readOnly: true
        lanes_failed:
          description: "The number of LANES that have failed sequencing."
          example: 2
          type: integer
          readOnly: true
        fail_messages:
          type: array
          items:
            $ref: "#/components/schemas/FailureInformation"
          description: "Error information on all sequencing failures."

    InstitutionPipelineStatus:
      type: object
      required:
        - running
        - completed
        - success
        - failed
        - fail_messages
      description: "Pathogen pipelines status summary information for an institution."
      properties:
        running:
          description: "The number of lanes currently running."
          example: 400
          type: integer
          readOnly: true
        completed:
          description: "The number of lanes that have completed pipelines, whether pass or fail."
          example: 300
          type: integer
          readOnly: true
        success:
          description: "The number of lanes that have successfully completed pipeline runs."
          example: 298
          type: integer
          readOnly: true
        failed:
          description: "The number of lanes that have failed their pipeline runs."
          example: 2
          type: integer
          readOnly: true
        fail_messages:
          type: array
          items:
            $ref: "#/components/schemas/FailureInformation"
          description: "Error information on all pipeline failures."

    FailureInformation:
      type: object
      required:
        - lane
        - stage
        - issue
      properties:
        lane:
          description: "The failed lane id."
          example: "31741_3#378"
          type: string
          readOnly: true
        stage:
          description: "The name of QC stage where issues was detected."
          example: "qc_lib"
          type: string
          readOnly: true
        issue:
          description: "The associated error message."
          example: "Error message"
          type: string
          readOnly: true

    UserData:
      type: object
      required:
        - "username"
        - "memberOf"
      properties:
        username:
          type: string
          description: "The username for this user"
          readOnly: true
        type:
          type: string
          description: "Optional employee user type field, e.g. admin"
          readOnly: true
        memberOf:
          type: array
          description: "A list of institutions and source countries of institutions for which the user is a member"
          items:
            $ref: "#/components/schemas/Institution"
