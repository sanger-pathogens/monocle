openapi: '3.0.0'

info:
   title: "Monocle Sample Metadata API"
   version: "0.2"
   description: "A REST API for accessing/updating Monocle sample metadata"
   contact:
      email: "monocle-help@sanger.ac.uk"

servers:
  $ref: "file:///app/metadata/interface/project_objects.yml#/components/schemas/APIServers"

paths:
  /metadata-upload:
    post:
      operationId: metadata.api.routes.update_sample_metadata_route
      summary: "Upload a new tab-delimited file of metadata"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Spreadsheet"
      responses:
        "200":
          description: "The upload succeeded"
        "400":
          description: "The file has not passed validation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    $ref: "#/components/schemas/ValidationErrors"

  /qc-data-upload:
    post:
      operationId: metadata.api.routes.update_qc_data_route
      summary: "Upload a new tab-delimited file of QC data"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Spreadsheet"
      responses:
        "200":
          description: "The upload succeeded"
        "400":
          description: "The file has not passed validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"

  /in-silico-upload:
    post:
      operationId: metadata.api.routes.update_in_silico_data_route
      summary: "Upload a new tab-delimited file of in silico data"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Spreadsheet"
      responses:
        "200":
          description: "The upload succeeded"
        "400":
          description: "The file has not passed validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"         
     
  /download:
    post:
      operationId: metadata.api.routes.get_download_metadata_route
      summary: "Download the metadata for the given download keys"
      requestBody:
        description: "A list of Sanger sample IDs"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadSampleKeys"
      responses:
        "200":
          description: "The download result set"
          content:
            application/json:
              schema:
                $ref: "file:///app/metadata/interface/project_objects.yml#/components/schemas/Metadata"
        "400":
          description: "Invalid arguments provided"
        "404":
          description: "No data could be found for the given download key"

  /download_qc_data:
    post:
      operationId: metadata.api.routes.get_download_qc_data_route
      summary: "Download the QC data for the given download keys"
      requestBody:
        description: "A list of lane IDs"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadLaneKeys"
      responses:
        "200":
          description: "The download result set"
          content:
            application/json:
              schema:
                $ref: "file:///app/metadata/interface/project_objects.yml#/components/schemas/QCData"
        "400":
          description: "Invalid arguments provided"
        "404":
          description: "No data could be found for the given download key"

  /download_in_silico_data:
    post:
      operationId: metadata.api.routes.get_download_in_silico_data_route
      summary: "Download the in silico data for the given download keys"
      requestBody:
        description: "A list of lane IDs"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadLaneKeys"
      responses:
        "200":
          description: "The download result set"
          content:
            application/json:
              schema:
                $ref: "file:///app/metadata/interface/project_objects.yml#/components/schemas/InSilicoData"
        "400":
          description: "Invalid arguments provided"
        "404":
          description: "No data could be found for the given download key"

  /project_information:
    get:
      operationId: metadata.api.routes.get_project_information
      summary: "Gather project information, mainly for UI"
      responses:
        "200":
          description: "The project result set"
        "404":
          description: "Project information could not be gathered from database"

  /samples:
    get:
      operationId: metadata.api.routes.get_samples_route
      summary: "Gather all sample records"
      responses:
        "200":
          description: "The sample result set"
          content:
            application/json:
              schema:
                $ref: "file:///app/metadata/interface/project_objects.yml#/components/schemas/Metadata"
        "404":
          description: "No data could be found for the given institutions or filters"

components:
  schemas:
  
    Spreadsheet:
      description: "File path to spreadsheet"
      type: object
      properties:
        spreadsheet:
          type: string
          format: binary
    
    ValidationErrors:
      description: "Error response"
      type: object
      properties:
        validationerror:
          type: array
          items:
            type: string
          minItems: 0
          readOnly: true

    DownloadSampleKeys:
      description: "A list of Sanger sample IDs"
      type: array
      items:
        type: string
        minLength: 3
        maxLength: 256
        pattern: ^[a-zA-Z0-9]*$
      minItems: 1
      example: ["5903STDY8059122", "5903STDY8059054"]

    DownloadLaneKeys:
      description: "A list of lane IDs"
      type: array
      items:
        type: string
        minLength: 3
        maxLength: 16
        pattern: ^[0-9_#]+$
      minItems: 1
      example: ["39214_1#341", "32820_2#33"]

    DownloadField:
      type: object
      required:
        - "title"
        - "value"
        - "order"
      properties:
        order:
          type: integer
          description: "An ordering integer index for the field"
          readOnly: true
        title:
          type: string
          description: "The name of the metadata field"
          readOnly: true
        value:
          type: string
          description: "The value of the metadata field"
          readOnly: true
