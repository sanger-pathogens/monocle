# codecov removed 2021-04-15 after security breach notice

stages:
  - unit_test
  - docker_build
  - docker_push
  
  
variables:
  UI_UNIT_TEST_IMAGE:       "${CI_REGISTRY_IMAGE}/gitlab-ui-unit-tests:latest"
  DASH_UNIT_TEST_IMAGE:     "${CI_REGISTRY_IMAGE}/gitlab-dash-unit-tests:latest"
  FRONTEND_UNIT_TEST_IMAGE: "${CI_REGISTRY_IMAGE}/node:alpine"
  METADATA_UNIT_TEST_IMAGE: "${CI_REGISTRY_IMAGE}/gitlab-metadata-unit-tests:latest"
  DOCKER_IMAGE:             "${CI_REGISTRY_IMAGE}/docker:19"
  DOCKER_DIND_IMAGE:        "${CI_REGISTRY_IMAGE}/gitlab-ci-dind:latest"


Dashboard unit tests:
  stage: unit_test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${DASH_UNIT_TEST_IMAGE}"
  before_script:
    - cd dash
  script:
    - ./unittests.sh


Metadata unit tests:
  stage: unit_test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${METADATA_UNIT_TEST_IMAGE}"
  before_script:
    - cd metadata/juno
    - pipenv install --system --ignore-pipfile
  script:
    - ./unittests.sh


    
# at every gitpush, build docker images in /api, /ui, /dash and /metadata/juno
# push the images to the container registry  with the commit SHA-1 as the tag
Docker builds:
  stage: docker_build
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_context in proxy api ui dash metadata;
         do
            cd "${CI_PROJECT_DIR}/${this_context}";
            if [[ "metadata" == ${this_context} ]]; then cd 'juno'; fi;
            pwd;
            this_image="monocle-${this_context}";
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
            docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
            echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
            docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
         done


# at every push/merge to master, tag the latest image builds as 'unstable'
Docker push as 'unstable':
  variables:
    # only docker, don't need to clone repo
    GIT_STRATEGY: none
  stage: docker_push
  only:
    - master
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_image in monocle-proxy monocle-api monocle-ui monocle-dash monocle-frontend monocle-metadata;
         do
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
            docker tag  $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} $CI_REGISTRY_IMAGE/${this_image}:unstable;
            echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:unstable üê≥";
            docker push $CI_REGISTRY_IMAGE/${this_image}:unstable;
         done

         
# at every release/tag, tag the images built from the latest image builds with the release tag and also as 'latest'
Docker push with release tag and as 'latest':
  variables:
    # only docker, don't need to clone repo
    GIT_STRATEGY: none
  stage: docker_push
  only:
    - tags
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_image in monocle-proxy monocle-api monocle-ui monocle-dash monocle-frontend monocle-metadata;
         do
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
            for this_tag in $CI_COMMIT_REF_NAME 'latest';
            do
               docker tag  $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} $CI_REGISTRY_IMAGE/${this_image}:${this_tag};
               echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_tag} üê≥";
               docker push $CI_REGISTRY_IMAGE/${this_image}:${this_tag};
            done;
         done
