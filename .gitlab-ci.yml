stages:
  - check_py_code_formatted
  - build
  - test
  - docker_tags_for_merges_and_releases


variables:
  DASH_API_CONTEXT:         "dash-api"
  # note there is no docker build associated with DATA_VIEW_CONTEXT
  DATA_VIEW_CONTEXT:        "data_view"
  METADATA_CONTEXT:         "metadata"
  FRONTEND_CONTEXT:         "frontend"
  QC_DATA_CONTEXT:          "qc-data"
  DOCKER_CONTEXT_LIST:      "${DASH_API_CONTEXT}/juno ${METADATA_CONTEXT}/juno ${FRONTEND_CONTEXT} proxy ldap-admin"
  DOCKER_IMAGE:             "${CI_REGISTRY_IMAGE}/docker:20"
  DOCKER_DIND_IMAGE:        "${CI_REGISTRY_IMAGE}/gitlab-ci-dind:latest"
  LINE_LENGTH:              120

Check that Python code is formatted:
  stage: check_py_code_formatted
  tags:
    - openstack-autoscale-theta
  # Keep this version in sync w/ the one from `./.pre-commit-config.yaml`.
  image: python:3.8.8-slim-buster
  before_script:
    # Install `git` needed for `isort` to ignore files from `.gitignore`
    - apt-get update && apt-get install -y git
    - pip install -r requirements-ci.txt
  script:
    - black --check --line-length ${LINE_LENGTH} . && isort --check-only . || exit_code=$?
    - >
      if [[ $exit_code -eq 1 ]]; then
        echo "‚ùå Some Python code isn't formatted. Ensure you run \`pre-commit install\` from \`monocle\` repo to install\
         the pre-commit hooks. Once istalled, they format code on each commit automatically."
      fi
    - exit $exit_code

# at every git push, build docker images
# push the images to the container registry  with the commit SHA-1 as the tag
Dashboard API docker build:
  stage: build
  tags:
    - autoscale-large
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         this_image="monocle-${DASH_API_CONTEXT}"
         this_context = "${DASH_API_CONTEXT}/juno"
         cd "${CI_PROJECT_DIR}/${this_context}";
         this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
         echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
         docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
         docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
         echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
         docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};

Metadata API docker build:
  stage: build
  tags:
    - autoscale-large
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         this_image="monocle-${METADATA_CONTEXT}"
         this_context = "${METADATA_CONTEXT}/juno"
         cd "${CI_PROJECT_DIR}/${this_context}";
         this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
         echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
         docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
         docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
         echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
         docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};

Front End docker build:
  stage: build
  tags:
    - autoscale-large
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         this_image="monocle-${FRONTEND_CONTEXT}"
         this_context = "${FRONTEND_CONTEXT}"
         cd "${CI_PROJECT_DIR}/${this_context}";
         this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
         echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
         docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
         docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
         echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
         docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};

Proxy docker build:
  stage: build
  tags:
    - autoscale-large
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         this_image="monocle-proxy"
         this_context = "proxy"
         cd "${CI_PROJECT_DIR}/${this_context}";
         this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
         echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
         docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
         docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
         echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
         docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};

LDAP Admin docker build:
  stage: build
  tags:
    - autoscale-large
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         this_image="monocle-ldap-admin"
         this_context = "ldap-admin"
         cd "${CI_PROJECT_DIR}/${this_context}";
         this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
         echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
         docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
         docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
         echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
         docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};

Dashboard API unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/monocle-${DASH_API_CONTEXT}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - cd "${DASH_API_CONTEXT}/juno"
  script:
    - ./unittests.sh
    - coverage report --show-missing --fail-under 85
    - coverage html
  coverage: /^TOTAL.+?(\d+\%)$/
  artifacts:
    when: always
    paths:
      - ${DASH_API_CONTEXT}/juno/htmlcov


Data view unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/monocle-${DASH_API_CONTEXT}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - cd "${DATA_VIEW_CONTEXT}"
  script:
    - ./unittests.sh
    - coverage report --fail-under 60
    - coverage html
  coverage: /^TOTAL.+?(\d+\%)$/
  artifacts:
    when: always
    paths:
      - ${DATA_VIEW_CONTEXT}/htmlcov


Metadata unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/monocle-${METADATA_CONTEXT}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - cd "${METADATA_CONTEXT}/juno"
  script:
    - ./unittests.sh
    - coverage report --show-missing --fail-under 85
    - coverage html
  coverage: /^TOTAL.+?(\d+\%)$/
  artifacts:
    when: always
    paths:
      - ${METADATA_CONTEXT}/juno/htmlcov


Front end unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/monocle-${FRONTEND_CONTEXT}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - cd /app
  script:
    - npm run test:coverage # Coverage thresholds in package.json
    - npm run test:summary
  coverage: /^Branches\s*:\s*([^%]+)/
  artifacts:
    when: always
    paths:
      - /app/coverage/lcov-report


QC data unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/monocle-${DASH_API_CONTEXT}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - cd "${QC_DATA_CONTEXT}"
  script:
    - ./unittests.sh
    - coverage report --fail-under 60
    - coverage html
  coverage: /^TOTAL.+?(\d+\%)$/
  artifacts:
    when: always
    paths:
      - ${QC_DATA_CONTEXT}/htmlcov


# at every merge to master, tag the latest image builds as 'unstable'
# (runs for any commit to master, but these should all be merges)
Docker tags for merge:
  variables:
    # only docker, don't need to clone repo
    GIT_STRATEGY: none
  stage: docker_tags_for_merges_and_releases
  only:
    - master
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_context in $DOCKER_CONTEXT_LIST;
         do
            if [[ "metadata/juno" == ${this_context} ]]; then
               this_image="monocle-${METADATA_CONTEXT}"
            elif [[ "dash-api/juno" == ${this_context} ]]; then
               this_image="monocle-${DASH_API_CONTEXT}"
            else
               this_image="monocle-${this_context}"
            fi;
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
            docker tag  $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} $CI_REGISTRY_IMAGE/${this_image}:unstable;
            echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:unstable üê≥";
            docker push $CI_REGISTRY_IMAGE/${this_image}:unstable;
         done


# at every release/tag, tag the images built from the latest image builds with the release tag and also as 'latest'
Docker tags for release:
  variables:
    # only docker, don't need to clone repo
    GIT_STRATEGY: none
  stage: docker_tags_for_merges_and_releases
  only:
    - tags
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_context in $DOCKER_CONTEXT_LIST;
         do
            if [[ "metadata/juno" == ${this_context} ]]; then
               this_image="monocle-${METADATA_CONTEXT}"
            elif [[ "dash-api/juno" == ${this_context} ]]; then
               this_image="monocle-${DASH_API_CONTEXT}"
            else
               this_image="monocle-${this_context}"
            fi;
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
            for this_tag in $CI_COMMIT_REF_NAME 'latest';
            do
               docker tag  $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} $CI_REGISTRY_IMAGE/${this_image}:${this_tag};
               echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_tag} üê≥";
               docker push $CI_REGISTRY_IMAGE/${this_image}:${this_tag};
            done;
         done
