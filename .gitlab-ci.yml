# codecov removed 2021-04-15 after security breach notice

stages:
  - build
  - test
  - docker_tags_for_merge
  - docker_tags_for_release
  
  
variables:
  FRONTEND_UNIT_TEST_IMAGE: "node:alpine"
  DASH_IMAGE:               "monocle-dash"
  METADATA_IMAGE:           "monocle-metadata"
  FRONTEND_IMAGE:           "monocle-frontend"
  DOCKER_BUILD_LIST:        "proxy dash frontend metadata/juno ldap-admin"
  DOCKER_IMAGE:             "${CI_REGISTRY_IMAGE}/docker:19"
  DOCKER_DIND_IMAGE:        "${CI_REGISTRY_IMAGE}/gitlab-ci-dind:latest"

    
# at every git push, build docker images in subdirectories in DOCKER_BUILD_LIST
# push the images to the container registry  with the commit SHA-1 as the tag
Docker builds:
  stage: build
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_context in $DOCKER_BUILD_LIST;
         do
            cd "${CI_PROJECT_DIR}/${this_context}";
            pwd;
            this_image="monocle-${this_context}";
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            echo "üê≥ Building ${CI_REGISTRY_IMAGE}/${this_image}:${this_commit_tag} üê≥";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:unstable || true;
            docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE/${this_image}:unstable --tag $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} . ;
            echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_commit_tag} üê≥";
            docker push $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
         done

         
Dashboard unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/${DASH_IMAGE}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    # codecov temporarily disabled 2021-04-15 after security breach notice
    # - pip install codecov
    - cd dash
  script:
    - ./unittests.sh
  # codecov temporarily disabled 2021-04-15 after security breach notice
  # after_script:
    # - codecov --commit "${CI_COMMIT_SHA}" --token "${CODECOV_TOKEN}" --required

    
Metadata unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/${METADATA_IMAGE}:commit-${CI_COMMIT_SHORT_SHA}"
  before_script:
    # codecov temporarily disabled 2021-04-15 after security breach notice
    # - pip install codecov
    - cd metadata/juno
  script:
    - ./unittests.sh
  # codecov temporarily disabled 2021-04-15 after security breach notice
  # after_script:
    # - codecov --commit "${CI_COMMIT_SHA}" --token "${CODECOV_TOKEN}" --required

    
# front end test requires special unit test image, because the service image
# doesn't include npm
Front end unit tests:
  stage: test
  only:
    - branches
  tags:
    - openstack-autoscale-theta
  image: "${CI_REGISTRY_IMAGE}/${FRONTEND_UNIT_TEST_IMAGE}"
  before_script:
    - cd frontend
    - npm set audit false
    - npm config set fetch-timeout 1000000
    - npm install
  script:
    - npm test


# at every merge to master, tag the latest image builds as 'unstable'
# (runs for any commit to master, but these should all be commits)
Docker tags for merge:
  variables:
    # only docker, don't need to clone repo
    GIT_STRATEGY: none
  stage: docker_tags_for_merge
  only:
    - master
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_context in $DOCKER_BUILD_LIST
         do
            if [[ "metadata/juno" == ${this_context} ]]; then
               this_image="monocle-metadata"
            else
               this_image="monocle-${this_context}"
            fi;
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
            docker tag  $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} $CI_REGISTRY_IMAGE/${this_image}:unstable;
            echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:unstable üê≥";
            docker push $CI_REGISTRY_IMAGE/${this_image}:unstable;
         done

         
# at every release/tag, tag the images built from the latest image builds with the release tag and also as 'latest'
Docker tags for release:
  variables:
    # only docker, don't need to clone repo
    GIT_STRATEGY: none
  stage: docker_tags_for_release
  only:
    - tags
  tags:
    - openstack-autoscale-theta
  image: "${DOCKER_IMAGE}"
  services:
    - name:  "${DOCKER_DIND_IMAGE}"
      alias: docker
  variables:
    DOCKER_BUILDKIT:      1
    DOCKER_TLS_CERTDIR:   ""
    DOCKER_HOST:          "tcp://docker:2375"
  before_script:
    - echo -n ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}
  script:
    - >
         for this_context in $DOCKER_BUILD_LIST
         do
            if [[ "metadata/juno" == ${this_context} ]]; then
               this_image="monocle-metadata"
            else
               this_image="monocle-${this_context}"
            fi;
            this_commit_tag="commit-${CI_COMMIT_SHORT_SHA}";
            docker pull $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag};
            for this_tag in $CI_COMMIT_REF_NAME 'latest';
            do
               docker tag  $CI_REGISTRY_IMAGE/${this_image}:${this_commit_tag} $CI_REGISTRY_IMAGE/${this_image}:${this_tag};
               echo "üê≥ Pushing ${CI_REGISTRY_IMAGE}:${this_image}:${this_tag} üê≥";
               docker push $CI_REGISTRY_IMAGE/${this_image}:${this_tag};
            done;
         done
